generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String?          @unique
  description    String?
  rolePermission RolePermission[]
  user           User[]
  roleType       RoleType         @default(OPERATOR)

  @@map("sb25_roles")
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String?          @unique
  description    String?
  rolePermission RolePermission[]

  @@map("sb25_permissions")
}

model RolePermission {
  roleId       Int
  role         Role?       @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permission? @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("sb25_role_permissions")
}

model User {
  id       String    @id @default(uuid())
  email    String?   @unique
  password String?
  isStatus Boolean?  @default(false)
  roleId   Int?
  role     Role?     @relation(fields: [roleId], references: [id])
  lecturer Lecturer?
  operator Operator?
  student  Student?
  Session  Session[]

  @@map("sb25_users")
}

model Session {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sb25_sessions")
}

model Major {
  id         Int        @id @default(autoincrement())
  name       String?
  numberCode Int?       @unique
  stringCode String?    @unique
  course     Course[]
  lecturer   Lecturer[]
  student    Student[]

  @@map("sb25_majors")
}

model Course {
  id        String  @id @default(uuid())
  name      String?
  code      String?
  sks       Int?
  majorId   Int?
  isPKL     Boolean @default(false)
  isSkripsi Boolean @default(false)
  major     Major?  @relation(fields: [majorId], references: [id])

  predecessorId String? @unique
  predecessor   Course? @relation("CourseHistory", fields: [predecessorId], references: [id])
  successor     Course? @relation("CourseHistory")

  @@map("sb25_courses")
}

model Lecturer {
  id               String             @id @default(uuid())
  npk              String?
  nidn             String?
  nuptk            String?
  name             String?
  frontTitle       String?
  backTitle        String?
  degree           DegreeStatus?
  year             Int?
  religion         Religion?
  gender           Gender?
  address          String?
  email            String?
  hp               String?
  photo            String?
  majorId          Int?
  major            Major?             @relation(fields: [majorId], references: [id])
  userId           String?            @unique
  user             User?              @relation(fields: [userId], references: [id])
  student          Student[]
  ReregisterDetail ReregisterDetail[]

  @@map("sb25_lecturers")
}

model Operator {
  id         String  @id @default(uuid())
  name       String?
  department String?

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@map("sb25_operators")
}

model Student {
  id               String             @id @default(uuid())
  nim              String?            @unique
  name             String?
  year             Int?
  religion         Religion?
  gender           Gender?
  address          String?
  placeOfBirth     String?
  birthday         DateTime?
  domicile         String?
  email            String?
  hp               String?
  photo            String?
  statusRegister   String?
  motherName       String?
  motherNIK        String?
  guardianName     String?
  guardianNIK      String?
  guardianHp       String?
  guardianJob      String?
  guardianAddress  String?
  majorId          Int?
  major            Major?             @relation(fields: [majorId], references: [id])
  lecturerId       String?
  lecturer         Lecturer?          @relation(fields: [lecturerId], references: [id])
  userId           String?            @unique
  user             User?              @relation(fields: [userId], references: [id])
  reregisterDetail ReregisterDetail[]

  @@map("sb25_students")
}

model Room {
  id       Int       @id @default(autoincrement())
  name     String?
  location Location?
  capacity Int?

  @@map("sb25_rooms")
}

model Period {
  id           String        @id @default(uuid())
  year         Int?
  semesterType SemesterType?
  name         String?       @unique
  isActive     Boolean?      @default(false)
  reregister   Reregister[]

  @@map("sb25_periods")
}

model Reregister {
  id                 String             @id @default(uuid())
  name               String?
  periodId           String?
  period             Period?            @relation(fields: [periodId], references: [id])
  isReregisterActive Boolean?           @default(false)
  reregisterDetail   ReregisterDetail[]

  @@map("sb25_reregisters")
}

model ReregisterDetail {
  reregisterId       String
  reregister         Reregister     @relation(fields: [reregisterId], references: [id])
  studentId          String
  student            Student        @relation(fields: [studentId], references: [id])
  nominal            Int?
  paymentReceiptFile String?
  paymentStatus      PaymentStatus  @default(BELUM_LUNAS)
  semester           Int?
  semesterStatus     SemesterStatus @default(NONAKTIF)
  campusType         CampusType?
  lecturerId         String?
  lecturer           Lecturer?      @relation(fields: [lecturerId], references: [id])

  // untuk memeriksa apakah student sudah mengisi data
  isStatusForm Boolean @default(false)

  @@id([reregisterId, studentId])
  @@map("sb25_reregisterDetails")
}

enum SemesterType {
  GANJIL
  GENAP
  GANJIL_PENDEK
  GENAP_PENDEK
}

enum Gender {
  PRIA
  WANITA
}

enum Religion {
  ISLAM
  KATOLIK
  PROTESTAN
  BUDDHA
  HINDU
  KONGHUCU
  DLL
}

enum StudentStatus {
  AKTIF
  NONAKTIF
  CUTI
  DO
  MENGUNDURKAN_DIRI
  LULUS
}

enum SemesterStatus {
  AKTIF
  NONAKTIF
  CUTI
  DO
  MENGUNDURKAN_DIRI
  LULUS
}

enum CampusType {
  BJB
  BJM
  SORE
  ONLINE
}

enum Location {
  BJB
  BJM
}

enum PaymentStatus {
  LUNAS
  BELUM_LUNAS
}

enum DegreeStatus {
  S1
  S2
  S3
}

enum RoleType {
  STUDENT
  LECTURER
  ADVISOR
  OPERATOR
}
